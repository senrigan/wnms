/**
 * 
 */
package com.gdc.nms.server.agent.connection;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gdc.nms.common.Ip;
import com.gdc.nms.server.ServerManager;
import com.sun.corba.se.impl.activation.ServerMain;

/**
 * Implementation of {@link ConnectionTester} that supports the
 * {@link ConnectionTester#isReachable(String, int, int)} using the
 * {@link InetAddress#isReachable(int)} method.
 * 
 * @author Jonatan Rico (jrico) - jonatan.rico@gdc-cala.com.mx
 */
public class InetAddressConnectionTester extends AbstractConnectionTester {

    private static final Logger log = LoggerFactory.getLogger(InetAddressConnectionTester.class);

    /**
     * Calls 'n' times the {@link InetAddress#isReachable(int)} method with the
     * value specified by <code>timeout</code>.
     * 
     * @param ip
     *            the ip to test.
     * @param timeout
     *            the time, in milliseconds, before the call aborts.
     * @return true if the ip is reachable, false otherwise.
     */
    @Override
    public boolean isReachable(String ip, int timeout) {
        boolean reachable = false;

        try {
            reachable = Ip.isReachable(ip, timeout);
        } catch (UnknownHostException uhe) {
            log.error("illegal IP address {}: {}", ip, uhe);
        } catch (IllegalArgumentException iae) {
            log.error("illegal argument for {} test: timeout = {}", ip, timeout);
        }
        ServerManager.getInstance().getDeviceCache().byIp(ip)

        return reachable;
    }

    @Override
    public boolean performIntensiveTest(String ip, int duration, int interval) {
        System.out.println("se esta ejecuntado el ping "+Arrays.toString(Thread.currentThread().getStackTrace()));

        return Ip.ping(ip, duration, interval);
    }
}
