package com.gdc.nms.testing.common;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import javax.persistence.Column;

import com.gdc.nms.model.Device;
import com.gdc.nms.model.Device.CliProtocol;
import com.gdc.nms.model.Device.Type;
import com.gdc.nms.model.SnmpVersion;
import com.sun.org.apache.commons.beanutils.BasicDynaBean;
import com.sun.org.apache.commons.beanutils.BasicDynaClass;
import com.sun.org.apache.commons.beanutils.DynaBean;
import com.sun.org.apache.commons.beanutils.DynaProperty;
import com.sun.org.apache.commons.beanutils.PropertyUtils;
import com.sun.org.apache.commons.beanutils.ResultSetDynaClass;

public class MySql {

    private static final CliProtocol[] CLIValues = CliProtocol.values();
    private static final Type[] TypeValues = Type.values();
    private static final SnmpVersion[] SnmpVersionValues = SnmpVersion.values();

    private static final MySql INSTANCE = new MySql();

    private Connection connection;
    private String host;
    private String user;
    private String pass;
    private String dbname;
    private int port;
    private List<Device> devices;

    private MySql() {
        host = "127.0.0.1";
        user = "root";
        pass = "vitalnoc";
        dbname = "nms";
        port = 3306;
    }

    public void setHost(String host) {
        this.host = host;
    }

    public String getHost() {
        return host;
    }

    public void setUsername(String user) {
        this.user = user;
    }

    public String getUsername() {
        return user;
    }

    public void setPassword(String pass) {
        this.pass = pass;
    }

    public void setDBName(String dbname) {
        this.dbname = dbname;
    }

    public String getDBName() {
        return dbname;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public int getPort() {
        return port;
    }

    public void connect(String host, String user, String password, String database) throws SQLException{
        this(host, user, password, database, 3306);
    }

    public void connect(String host, String user, String password, String database, int port) throws SQLException{
        setHost(host);
        setUsername(user);
        setPassword(password);
        setDBName(database);
        setPort(port);
        connect();
    }

    private void connect() throws SQLException {
        if (connection == null) {
            connection = DriverManager.getConnection("jdbc:mysql://" + getHost() + ":"+getPort()+"/" + getDBName() + "?" + "user="
                    + getUsername() + "&password=" + pass);
        }
    }

    private List<DynaBean> executeQuery(String query) throws SQLException {
        PreparedStatement statement = null;
        List<DynaBean> beans = Collections.emptyList();
        try {
            statement = connection.prepareStatement(query);
            ResultSet result = executeQuery(statement);
            beans = getDynaBeans(result);
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } finally {
            if (statement != null) {
                statement.close();
            }
        }

        return beans;
    }

    private ResultSet executeQuery(PreparedStatement statement) throws SQLException {
        ResultSet executeQuery = statement.executeQuery();
        return executeQuery;
    }

    private List<DynaBean> getDynaBeans(ResultSet result) throws Exception {
        ResultSetDynaClass rsdc = new ResultSetDynaClass(result);

        BasicDynaClass bdc = new BasicDynaClass("QueryResult", BasicDynaBean.class, rsdc.getDynaProperties());

        List<DynaBean> dynabeans = new ArrayList<DynaBean>();

        @SuppressWarnings("unchecked")
        Iterator<DynaBean> rows = rsdc.iterator();
        while (rows.hasNext()) {
            DynaBean newInstance = bdc.newInstance();
            PropertyUtils.copyProperties(newInstance, rows.next());
            dynabeans.add(newInstance);
        }

        return dynabeans;
    }

    private void getDevices() throws SQLException {
        List<DynaBean> executeQuery = executeQuery("SELECT * FROM DEVICE");

        for (DynaBean bean : executeQuery) {
            Device d = getDevice(bean);
            if (d != null) {
                devices.add(d);
            }
        }
    }

    public void getProjects() throws SQLException {
        List<DynaBean> executeQuery = executeQuery("SELECT ID, NAME FROM PROJECT");

        for (DynaBean bean : executeQuery) {
            Device d = getDevice(bean);
            if (d != null) {
                devices.add(d);
            }
        }

    }

    private Device getDevice(DynaBean bean) {
        Device d = null;
        try {
            d = new Device((String) bean.get("ip"));
        } catch (Exception e) {
            return d;
        }
        d.setConnectionProtocolType(CLIValues[(Integer) bean.get("protocoltype")]);
        d.setType(TypeValues[(Integer) bean.get("type")]);
        d.setSnmpVersion(SnmpVersionValues[(Integer) bean.get("snmpversion")]);

        Field[] fields = Device.class.getDeclaredFields();

        Column annotation = null;

        for (DynaProperty p : bean.getDynaClass().getDynaProperties()) {
            for (Field f : fields) {
                try {
                    annotation = (Column) f.getAnnotations()[0];
                } catch (Exception e) {
                    annotation = null;
                }

                if (f.getName().equalsIgnoreCase(p.getName())
                        || (annotation != null && annotation.name().equalsIgnoreCase(p.getName()))) {
                    f.setAccessible(true);

                    try {
                        f.set(d, bean.get(p.getName()));
                    } catch (IllegalArgumentException e) {
                        // e.printStackTrace();
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }

                }

                annotation = null;
            }
        }

        return d;
    }

    public boolean isConnected() {
        return connection != null;
    }

    public static MySql getInstance() {
        return INSTANCE;
    }
}
