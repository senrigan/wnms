package connection;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.LineIterator;

import com.gdc.nms.model.Device;

import connection.credential.MysqlCredential;
import connection.credential.SSHCredential;
import connection.credential.Server;

public class MysqlData {
	
	private List<Device> devices;
	private HashMap<String,ArrayList<Device>> foldersDevice ;
	HashMap<String,String> oidSuport;
	
	public MysqlData(){
		
	}
	
	public void createFilesAndFolders(Server infoServ){
		devices=getMysqlDataDevice(infoServ.getMysqlCredential());
		searchDeviceSuport(new File("C:\\Users\\senrigan\\workspace\\workspaceWork\\dev\\development\\source\\packages\\common\\src\\com\\gdc\\nms\\common\\device.properties"));
		try {
			createDriverFile(new File(infoServ.getSshCredential().getHostname()));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("error al crear los archiivos");
		}
	}
	
	private void createDriverFile(File directory) throws IOException{
//		Iterator it=foldersDevice.keySet().iterator();
		System.out.println("entry"+foldersDevice.keySet());
		if(directory.exists()||directory.mkdir()){
			String xmlDevice;
			for(Map.Entry<String,ArrayList<Device>> entry:foldersDevice.entrySet()){
				System.out.println("valor"+entry.getKey()+"value"+entry.getValue());
				System.out.println("the nameoffileis"+oidSuport.get(entry.getKey()));
				ArrayList<Device> devices=entry.getValue();
				xmlDevice="";
				String xml="";
				Long time_init,time_end;
				time_init=System.currentTimeMillis();
				xmlDevice+=DeviceXML.toXML(devices);
				
//				for(Device device:devices){
//					xmlDevice+=DeviceXML.toXML(device);
//					xmlDevice=xmlDevice.replaceAll("\n","");
//					//System.out.println("xml"+xmlDevice);
//					xml+=xmlDevice+"\n";
//				}
//				try{
//		    		String data = " This content will append to the end of the file";
//		 
//		    		File file =new File("javaio-appendfile.txt");
//		 
//		    		//if file doesnt exists, then create it
//		    		if(!file.exists()){
//		    			file.createNewFile();
//		    		}
//		 
//		    		//true = append file
//		    		FileWriter fileWritter = new FileWriter(file.getName(),true);
//		    	        BufferedWriter bufferWritter = new BufferedWriter(fileWritter);
//		    	        bufferWritter.write(data);
//		    	        bufferWritter.close();
//		 
//			        System.out.println("Done");
//		 
//		    	}catch(IOException e){
//		    		e.printStackTrace();
//		    	}
				time_end=System.currentTimeMillis();
				System.out.println("the time que tard"+(time_end-time_init));
				
				//System.out.println("full xml"+xml);
				File driverFile=new File(directory.getName()+"/"+oidSuport.get(entry.getKey())+".txt");
				FileUtils.writeStringToFile(driverFile, xml);
				
				
				
			}
		}else{
			throw new IOException();
		}
		
//		while(it.hasNext()){
//			Map.Entry e=(Map.Entry)it.next();
//			System.out.println("valor"+e.getKey()+"value"+e.getValue());
//		}
	}
	
	
	private String PreviousSysOID(String sysOID){
		sysOID=sysOID.substring(0,sysOID.lastIndexOf('.'));
		return sysOID;
	}
	private HashMap<String,ArrayList<Device>>  searchDeviceSuport(File source){
		oidSuport=getSysoOIDSuport(source);
		System.out.println("suports"+oidSuport);
		System.out.println(oidSuport.containsKey("1.3.6.1.4.1.9"));
		foldersDevice=new HashMap<String,ArrayList<Device>> ();
		for(Device device:devices){
			if(oidSuport.containsKey(device.getSysObjectID())){
				
//				if(foldersDevice.containsKey(device.getSysObjectID())){
//					foldersDevice.get(device.getSysObjectID()).add(device);
//				}else{
//					fileDevice=new ArrayList<Device>();
//					fileDevice.add(device);
//					foldersDevice.put(device.getSysObjectID(),fileDevice);
//				}
				addToFolder(device.getSysObjectID(),device);
//				System.out.println("se encontro"+device.getSysObjectID());
			}else{
				String newOID=device.getSysObjectID();
				while(device.getSysObjectID().length()>1 ){
//					System.out.println(newOID);
					if((oidSuport.containsKey(newOID))){
						addToFolder(newOID,device);
						break;
					}else{
						newOID=PreviousSysOID(newOID);
					}
					
					
				}
				if(newOID.length()>1){
					addToFolder(newOID,device);
//					System.out.println("se encontro"+device.getSysObjectID());

				}
			}
		}
		return foldersDevice;

	}
	
	private void  addToFolder(String sysOIDFolder,Device device){
			ArrayList<Device>fileDevice=new ArrayList<Device>();
//			System.out.println("añadiendo al folder"+sysOIDFolder);
//			System.out.println("esta en hash"+foldersDevice.containsKey(sysOIDFolder));
			System.out.println(""+sysOIDFolder+" "+com.gdc.nms.server.drivers.snmp.DriverManager.getInstance().getDriver(device).getClass());
			if(foldersDevice.containsKey(sysOIDFolder)){
//				System.out.println("contendido en folder"+sysOIDFolder);
				foldersDevice.get(sysOIDFolder).add(device);
			}else{
				fileDevice=new ArrayList<Device>();
				fileDevice.add(device);
				foldersDevice.put(sysOIDFolder,fileDevice);
			}
		
		
	}
	
	private List<Device> getMysqlDataDevice(MysqlCredential mysqlCredent){
		MySql mysqlBase=new MySql(mysqlCredent);
		try {
			mysqlBase.connect();
			return mysqlBase.getDevices();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
		
	}
	
	private HashMap<String,String> getSysoOIDSuport(File deviceFile){
//		 InputStream in = new URL( "http://commons.apache.org" ).openStream();
//		 try {
//		   System.out.println( IOUtils.toString( in ) );
//		 } finally {
//		   IOUtils.closeQuietly(in);
//		 }
		try {
			long time_start, time_end;
//			time_start = System.currentTimeMillis();
//			String st=FileUtils.readFileToString(deviceFile);
//			time_end = System.currentTimeMillis();
//			System.out.println("the task has taken st"+ ( time_end - time_start ) +" milliseconds");
//			time_start = System.currentTimeMillis();
//
//			List<String> lst=FileUtils.readLines(deviceFile);
//			time_end = System.currentTimeMillis();
//			System.out.println("the task has taken "+ ( time_end - time_start ) +" milliseconds");
//			
//			System.out.println("is string"+st);
//			System.out.println("is lines"+lst);
			 LineIterator it = FileUtils.lineIterator(deviceFile, "UTF-8");
			 HashMap<String,String> hash=new HashMap<String,String>(); 
			 try {
				 time_start = System.currentTimeMillis();
				 String name,key;
//				 int i=0,o=0;
				 //Pattern p=Pattern.compile("[^[0-9]*\\.*]*");
				 Pattern p=Pattern.compile("[a-zA-Z]+");
				 while (it.hasNext()) {
			     String line = it.nextLine();
			     
			     if(line.startsWith("#")){
			    	 line=line.replace("#", " ");
			    	 name=line.replaceAll(" ","");
			    	 line=it.nextLine();
			    	 key=line.substring(0, line.indexOf("=")-1);
			    	//System.out.println("lne"+key);
//			    	 i++;
			    	 Matcher m=p.matcher(key);
			    	 if(key.indexOf(".")>=0){
			    		 //System.out.println(""+key.substring(key.lastIndexOf("."),key.length()-1));
				    	//m=p.matcher(key.substring(key.lastIndexOf("."),key.length()-1));
			    		// System.out.println("key"+key);
				    	 m=p.matcher(key);
			    		 //if(key.matches("[.a-zA-Z]")){
				    	 
				    	 if(!m.find()){

				    		 //key=line.substring(0, line.indexOf("="));
				    		 key.replaceAll(" ","");
					    	 hash.put(key, name);
					    	 
//					    	 System.out.println(" name "+name+" key "+key);
				    	 }
			    	 }
			    		
			    	 
			    	 
			     }
			     /// do something with line
			   }
		    	// System.out.println("i"+i+" 0"+o);

			   time_end = System.currentTimeMillis();
				System.out.println("the task has taken "+ ( time_end - time_start ) +" milliseconds");
				 return hash;
			 } finally {
			   LineIterator.closeQuietly(it);
			   System.out.println("si acabo");
			  
			 }

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	
	public static void main(String[] args) {
		MysqlData msql=new MysqlData();
//		try {
//			HashMap<String,String> hash=msql.getSysoOIDSuport(new File("C:\\Users\\senrigan\\workspace\\workspaceWork\\dev\\development\\source\\packages\\common\\src\\com\\gdc\\nms\\common\\device.properties"));
//			System.out.println("hash key"+hash.keySet());
//			System.out.println("content"+hash.entrySet());
		Server serv2=new Server();
		serv2.setNameServer("server 2");
		serv2.setMysqlCredential(new MysqlCredential("192.168.208.3", "root", "root", "nms",3306));
		serv2.setSshCredential(new SSHCredential("9","10","11",12));
		serv2.setDeleteAfterClose(true);
		serv2.setGlassFishPath("home/");
		msql.createFilesAndFolders(serv2);
	}
	
	

}
