package com.gdc.nms.server.drivers.snmp.mock;



import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_HC_IN_BROADCAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_HC_IN_MULTICAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_HC_IN_OCTETS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_HC_IN_UCAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_HC_OUT_BROADCAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_HC_OUT_MULTICAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_HC_OUT_OCTETS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_HC_OUT_UCAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_IN_BROADCAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_IN_DISCARDS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_IN_ERRORS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_IN_MULTICAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_IN_NUCAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_IN_OCTETS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_IN_UCAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_LAST_CHANGE;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_OPER_STATUS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_OUT_BROADCAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_OUT_DISCARDS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_OUT_ERRORS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_OUT_MULTICAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_OUT_NUCAST_PKTS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_OUT_OCTETS;
import static com.gdc.nms.server.drivers.snmp.StandardOid.IF_OUT_UCAST_PKTS;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.mail.MethodNotSupportedException;

import org.snmp4j.smi.OID;
import org.snmp4j.smi.Variable;


import com.gdc.nms.common.MapUtil;
import com.gdc.nms.model.Device;
import com.gdc.nms.model.DeviceResource;
import com.gdc.nms.model.Interface;
import com.gdc.nms.model.Interface.IfXTableMode;
import com.gdc.nms.model.IpSla;
import com.gdc.nms.model.NmsEntity;
import com.gdc.nms.model.NmsProperty;
import com.gdc.nms.model.QosClass;
import com.gdc.nms.model.stats.ZzInterfaceStatsEntry;
import com.gdc.nms.server.drivers.snmp.Driver;
import com.gdc.nms.server.drivers.snmp.SnmpConnector;
import com.gdc.nms.server.drivers.snmp.SnmpConnectorException;
import com.gdc.nms.server.eclipselink.SqlInsertableRowDescriptor;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;

public class MockDriver implements Driver {
	private final Lock lock=new ReentrantLock();
	private static final String RESOURCE_FILE_NAME="DeviceResources.txt";
	private static final String INTERFACE_FILE_NAME="Interfaces.txt";
	private final String hostName="mock device";
	//if you will modify this sysoid you remember modify the device.properties file
	public static final String SYSOID="1.3.6.1.4.1.99999";
	private static final HashMap<String , WrapperMock> ResourceEmulate=new HashMap<String,WrapperMock>();
	protected Device device;

	@Override
	public void bind(Device device) {
		   lock.lock();
	       this.device = device;
	        
	}

	@Override
	public void unbind() {
            lock.unlock();
	}

	@Override
	public Device getDevice() {
		return this.device;
	}

	@Override
	public SnmpConnector getSnmpConnector() {
		return null;
	}

	@Override
	public void setSnmpConnector(SnmpConnector snmpConnector) {
		
	}
	@SuppressWarnings( "unchecked" )
	@Override
	public Set<Interface> getInterfaces() throws SnmpConnectorException {
		File interfacesFile=new File(MockDriver.class.getResource(INTERFACE_FILE_NAME).getFile());
		XStream xstream=new XStream(new DomDriver());
		Set<Interface> interfaces= (Set<Interface>) xstream.fromXML(interfacesFile);
		return interfaces;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<DeviceResource> getDeviceResources() throws SnmpConnectorException {
		File resourcesFile=new File(MockDriver.class.getResource(RESOURCE_FILE_NAME).getFile());
		XStream xstream=new XStream(new DomDriver());
		ArrayList <DeviceResource> resources=(ArrayList<DeviceResource>) xstream.fromXML(resourcesFile);
		return resources;
	}
	
	
	
	
	
	
	
	
	 

	@Override
	public List<QosClass> getQosClasses(List<Integer> ifIndexes)
			throws SnmpConnectorException {
		return Collections.emptyList();
	}

	@Override
	public List<IpSla> getIpSlas() throws SnmpConnectorException {
		return Collections.emptyList();
	}

	@Override
	public Map<NmsProperty, Object> discoverDevice()
			throws SnmpConnectorException {
		Map<NmsProperty, Object> properties = new HashMap<NmsProperty, Object>(MapUtil.getSize(5));
		properties.put(Device.Prop.sysObjectID, SYSOID);
			
		properties.put(Device.Prop.description, "this a mock device for testing");
	           
	    properties.put(Device.Prop.hostname, this.hostName);
	           
	    properties.put(Device.Prop.contact, "mock@nms.com");
	           
	                
		
		return properties;
	}

	@Override
	public String getSysOid() throws SnmpConnectorException {
		
		return  SYSOID;
	}

	@Override
	public String getHostname() throws SnmpConnectorException {
		return this.hostName;
	}

	@Override
	public long getSysUpTime() throws SnmpConnectorException {
		
		return 0;
	}

	@Override
	public Map<NmsEntity, Map<NmsProperty, Object>> retrieveChanges()
			throws SnmpConnectorException {
		
		return Collections.emptyMap();
	}

	@Override
	public String getInventory() throws SnmpConnectorException,
			MethodNotSupportedException {
		
		return "";
	}

	@Override
	public IfXTableMode getIfXTableMode(Interface iface) {
		
		return null;
	}

	@Override
	public SqlInsertableRowDescriptor getStats(long time, String tableName,
			boolean measureLatency) throws SnmpConnectorException {
		
		return null;
	}

	@Override
	public SqlInsertableRowDescriptor getStats(DeviceResource deviceResource,
			long time, String tableName) throws SnmpConnectorException {
		
		return null;
	}

	@Override
	public SqlInsertableRowDescriptor getStats(Interface iface, long time,
			String tableName) throws SnmpConnectorException {
		
		return null;
	}

	@Override
	public SqlInsertableRowDescriptor getMobileStats(Interface iface,
			long time, String tableName) throws SnmpConnectorException {
		
		return null;
	}

	@Override
	public SqlInsertableRowDescriptor getStats(QosClass qosClass, long time,
			String tableName) throws SnmpConnectorException {
		
		return null;
	}

	@Override
	public SqlInsertableRowDescriptor getStats(IpSla ipSla, long time,
			String tableName) throws SnmpConnectorException {
		
		return null;
	}
	
	protected Map<String, Object> getInterfaceStats(Interface iface, long time) {
		Map<String, Object> properties = null;
        boolean notVirtual = !iface.isVirtual();
        boolean ifXTable64 = iface.getIfXTableMode() == IfXTableMode.MODE_64_BITS;
        boolean ifXTable32 = iface.getIfXTableMode() == IfXTableMode.MODE_32_BITS;
        boolean ifXTable = ifXTable64 || ifXTable32;
        int ifIndex = iface.getIfIndex();
        int[] oidSubIndex = new int[] { ifIndex };
        OID operStatusOid = new OID(IF_OPER_STATUS.getValue(), oidSubIndex);
        OID lastChangeOid = new OID(IF_LAST_CHANGE.getValue(), oidSubIndex);
        OID inOctetsOid = new OID(ifXTable64 ? IF_HC_IN_OCTETS : IF_IN_OCTETS, oidSubIndex);
        OID outOctetsOid = new OID(ifXTable64 ? IF_HC_OUT_OCTETS : IF_OUT_OCTETS, oidSubIndex);
        OID inUcastPktsOid = new OID(ifXTable64 ? IF_HC_IN_UCAST_PKTS : IF_IN_UCAST_PKTS, oidSubIndex);
        OID outUcastPktsOid = new OID(ifXTable64 ? IF_HC_OUT_UCAST_PKTS : IF_OUT_UCAST_PKTS, oidSubIndex);
        OID inMulticastPktsOid = new OID(ifXTable64 ? IF_HC_IN_MULTICAST_PKTS : (ifXTable32 ? IF_IN_MULTICAST_PKTS
                : IF_IN_NUCAST_PKTS), oidSubIndex);
        OID outMulticastPktsOid = new OID(ifXTable64 ? IF_HC_OUT_MULTICAST_PKTS : (ifXTable32 ? IF_OUT_MULTICAST_PKTS
                : IF_OUT_NUCAST_PKTS), oidSubIndex);
        OID inBroadcastPktsOid = ifXTable ? new OID(ifXTable64 ? IF_HC_IN_BROADCAST_PKTS : IF_IN_BROADCAST_PKTS,
            oidSubIndex) : null;
        OID outBroadcastPktsOid = ifXTable ? new OID(ifXTable64 ? IF_HC_OUT_BROADCAST_PKTS : IF_OUT_BROADCAST_PKTS,
            oidSubIndex) : null;
        OID inDiscardsOid = notVirtual ? new OID(IF_IN_DISCARDS, oidSubIndex) : null;
        OID outDiscardsOid = notVirtual ? new OID(IF_OUT_DISCARDS, oidSubIndex) : null;
        OID inErrorsOid = notVirtual ? new OID(IF_IN_ERRORS, oidSubIndex) : null;
        OID outErrorsOid = notVirtual ? new OID(IF_OUT_ERRORS, oidSubIndex) : null;
        
        List<OID> oids = new ArrayList<OID>(14);
        oids.add(operStatusOid);
        oids.add(lastChangeOid);
        oids.add(inOctetsOid);
        oids.add(outOctetsOid);
        oids.add(inUcastPktsOid);
        oids.add(outUcastPktsOid);
        oids.add(inMulticastPktsOid);
        oids.add(outMulticastPktsOid);
        
        //ifXTable
        oids.add(inBroadcastPktsOid);
        oids.add(outBroadcastPktsOid);
        //not virtual
        oids.add(inDiscardsOid);
        oids.add(outDiscardsOid);
        oids.add(inErrorsOid);
        oids.add(outErrorsOid);
        
        Map<OID,Variable> values= new HashMap <OID,Variable>();
        properties = new HashMap<String , Object>(MapUtil.getSize(oids.size()));
        properties.put(ZzInterfaceStatsEntry.Prop.deviceId.getColumnName(),device.getId() );
        properties.put(ZzInterfaceStatsEntry.Prop.interfaceId.getColumnName(), iface.getId());
        properties.put(ZzInterfaceStatsEntry.Prop.time.getColumnName(), time);

        
	}
	@Override
	public boolean measureLatency() {
		
		return false;
	}

	@Override
	public int getLatency(int sleepMillis) throws SnmpConnectorException {
		
		return 0;
	}

	@Override
	public Set<Integer> getIfIndexesWithQos() throws SnmpConnectorException {
		return Collections.emptySet();
	}

}
